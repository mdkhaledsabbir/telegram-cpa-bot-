import os
import telebot
from telebot import types
import json

TOKEN = os.environ.get('TOKEN')
ADMIN_ID = int(os.environ.get('ADMIN_ID'))
bot = telebot.TeleBot(TOKEN)

TASK_REWARD = 30
REFERRAL_REWARD = 10
MIN_WITHDRAW = 1000
MAX_SCREENSHOTS = 3

TASKS = {
    "Task 1": "ЁЯУМ Pin Submit: https://tinyurl.com/37xxp2an\nЁЯЦ╝ рж╕рж░рзНржмрзЛржЪрзНржЪ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи\nЁЯТ░ ржкрзЗржорзЗржирзНржЯ: рз│30",
    "Task 2": "ЁЯУМ Pin Submit: https://tinyurl.com/4vc76fw5\nЁЯЦ╝ рж╕рж░рзНржмрзЛржЪрзНржЪ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи\nЁЯТ░ ржкрзЗржорзЗржирзНржЯ: рз│30",
    "Task 3": "ЁЯУз Email Submit: https://tinyurl.com/yyherfxt\nЁЯЦ╝ рж╕рж░рзНржмрзЛржЪрзНржЪ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи\nЁЯТ░ ржкрзЗржорзЗржирзНржЯ: рз│30",
    "Task 4": "ЁЯУз Email Submit: https://tinyurl.com/25nt96v9\nЁЯЦ╝ рж╕рж░рзНржмрзЛржЪрзНржЪ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи\nЁЯТ░ ржкрзЗржорзЗржирзНржЯ: рз│30"
}

DATA_FILE = 'users.json'

if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'w') as f:
        json.dump({}, f)

def load_data():
    with open(DATA_FILE) as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)
    data = load_data()
    if user_id not in data:
        data[user_id] = {
            'referrals': 0,
            'balance': 0,
            'submitted': 0,
            'screenshots': [],
            'tasks': {}
        }
        ref = message.text.split(' ')[1] if len(message.text.split()) > 1 else None
        if ref and ref in data and ref != user_id:
            data[ref]['referrals'] += 1
            data[ref]['balance'] += REFERRAL_REWARD
            bot.send_message(int(ref), f"ЁЯОЙ ржЖржкржирж┐ рззржЯрж┐ рж░рзЗржлрж╛рж░рзЗрж▓ ржкрзЗрзЯрзЗржЫрзЗржи! ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржПржЦржи: рз│{data[ref]['balance']}")
    save_data(data)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("ЁЯУЭ ржЯрж╛рж╕рзНржХржЧрзБрж▓рзЛ", "ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛", "ЁЯТ╕ ржмрзНржпрж╛рж▓рзЗржирзНрж╕")
    markup.add("ЁЯУи ржЙржЗржержбрзНрж░", "ЁЯСе рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ", "ЁЯУШ ржХрж╛ржЬрзЗрж░ ржирж┐рзЯржо")
    if str(message.chat.id) == str(ADMIN_ID):
        markup.add("ЁЯСБя╕П ржЗржЙржЬрж╛рж░ ржжрзЗржЦрзБржи", "ЁЯЫая╕П ржЗржЙржЬрж╛рж░ ржПржбрж┐ржЯ")
    bot.send_message(message.chat.id, "рж╕рзНржмрж╛ржЧрждржо! ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржиржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ЁЯСЗ", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "ЁЯУЭ ржЯрж╛рж╕рзНржХржЧрзБрж▓рзЛ")
def task_list(message):
    msg = "ЁЯФ╣ ржмрж░рзНрждржорж╛ржи ржЯрж╛рж╕рзНржХ:\n\n"
    for title, link in TASKS.items():
        msg += f"тЬЕ {title}\n{link}\n\n"
    bot.send_message(message.chat.id, msg)

@bot.message_handler(func=lambda m: m.text == "ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛")
def ask_screenshot(message):
    user_id = str(message.chat.id)
    data = load_data()
    user = data.get(user_id, {})
    submitted = user.get('submitted', 0)

    if submitted >= MAX_SCREENSHOTS:
        bot.send_message(message.chat.id, f"тЭМ ржЖржкржирж┐ ржЗрждрзЛржоржзрзНржпрзЗ рж╕рж░рзНржмрзЛржЪрзНржЪ {MAX_SCREENSHOTS}ржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ ржжрж┐рзЯрзЗржЫрзЗржиред")
        return
    bot.send_message(message.chat.id, f"ЁЯУ╕ ржжрзЯрж╛ ржХрж░рзЗ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж╛ржи ({submitted + 1}/{MAX_SCREENSHOTS})")

@bot.message_handler(content_types=['photo'])
def handle_screenshot(message):
    user_id = str(message.chat.id)
    data = load_data()
    user = data.get(user_id, {})

    if user.get('submitted', 0) >= MAX_SCREENSHOTS:
        bot.send_message(message.chat.id, "тЭМ ржЖржкржирж┐ рж╕рж░рзНржмрзЛржЪрзНржЪ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ ржжрж┐рзЯрзЗржЫрзЗржиред")
        return

    user['submitted'] += 1
    user['screenshots'].append(message.photo[-1].file_id)

    if user['submitted'] == MAX_SCREENSHOTS:
        user['balance'] += TASK_REWARD
        bot.send_message(message.chat.id, f"тЬЕ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ рж╕ржорзНржкржирзНржи! ржЖржкржирж┐ рз│{TASK_REWARD} ржкрзЗрзЯрзЗржЫрзЗржиред ржорзЛржЯ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: рз│{user['balance']}")
    else:
        bot.send_message(message.chat.id, f"ЁЯУ╕ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ {user['submitted']}/3 ржЬржорж╛ рж╣рзЯрзЗржЫрзЗред")

    save_data(data)
    bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)

@bot.message_handler(func=lambda m: m.text == "ЁЯТ╕ ржмрзНржпрж╛рж▓рзЗржирзНрж╕")
def check_balance(message):
    user_id = str(message.chat.id)
    data = load_data()
    user = data.get(user_id, {})
    balance = user.get('balance', 0)
    referrals = user.get('referrals', 0)
    bot.send_message(message.chat.id, f"ЁЯТ░ ржЖржкржирж╛рж░ ржорзЛржЯ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: рз│{balance}\nЁЯСе рж░рзЗржлрж╛рж░ рж╕ржВржЦрзНржпрж╛: {referrals}")

@bot.message_handler(func=lambda m: m.text == "ЁЯУи ржЙржЗржержбрзНрж░")
def withdraw_request(message):
    user_id = str(message.chat.id)
    data = load_data()
    user = data.get(user_id, {})
    balance = user.get('balance', 0)
    if balance >= MIN_WITHDRAW:
        bot.send_message(message.chat.id, "тЬЕ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржПржбржорж┐ржи ржЪрзЗржХ ржХрж░рзЗ ржЬрж╛ржирж╛ржмрзЗржиред")
        bot.send_message(ADMIN_ID, f"ЁЯУи @{message.chat.username or message.chat.id} ржЙржЗржержбрзНрж░ ржЪрж╛рзЯред ржмрзНржпрж╛рж▓рзЗржирзНрж╕: рз│{balance}")
    else:
        bot.send_message(message.chat.id, f"тЭМ ржЙржЗржержбрзНрж░ ржХрж░рждрзЗ рж╣рж▓рзЗ ржЕржирзНрждржд рз│{MIN_WITHDRAW} ржкрзНрж░рзЯрзЛржЬржиред")

    bot.send_message(message.chat.id, "ЁЯТ│ ржкрзЗржорзЗржирзНржЯ ржорзЗржержб: bKash | Nagad | Rocket")

@bot.message_handler(func=lambda m: m.text == "ЁЯСе рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ")
def referral(message):
    bot.send_message(message.chat.id, f"ЁЯФЧ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ:\nhttps://t.me/{bot.get_me().username}?start={message.chat.id}")

@bot.message_handler(func=lambda m: m.text == "ЁЯУШ ржХрж╛ржЬрзЗрж░ ржирж┐рзЯржо")
def rules(message):
    rule_text = (
        "ЁЯУМ ржкрзНрж░рждрж┐ржЯрж┐ ржЯрж╛рж╕рзНржХрзЗрж░ ржЬржирзНржп рж╕рж░рзНржмрзЛржЪрзНржЪ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи:\n"
        "1я╕ПтГг ржкрзНрж░ржержо ржХрзНрж▓рж┐ржХ ржХрж░рж╛рж░ рж╕ржорзЯ\n"
        "2я╕ПтГг ржПржкрж╕/ржлрж░рзНржорзЗ ржврзЛржХрж╛рж░ рж╕ржорзЯ\n"
        "3я╕ПтГг ржЗржорзЗржЗрж▓ ржмрж╛ ржкрж┐ржи рж╕рж╛ржмржорж┐ржЯ ржХрж░рж╛рж░ ржкрж░\n\n"
        "ЁЯЦ╝ ржПржЧрзБрж▓рзЛ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржмрж╛ржЯржирзЗ ржкрж╛ржарж╛ржиред\n"
        "тЬЕ ржпрж╛ржЪрж╛ржЗрзЯрзЗрж░ ржкрж░ ржЯрж╛ржХрж╛ ржЕрзНржпрж╛ржб ржХрж░рж╛ рж╣ржмрзЗред"
    )
    bot.send_message(message.chat.id, rule_text)

# ---------------------- Admin Panel ----------------------

@bot.message_handler(func=lambda m: m.text == "ЁЯСБя╕П ржЗржЙржЬрж╛рж░ ржжрзЗржЦрзБржи" and str(m.chat.id) == str(ADMIN_ID))
def view_users(message):
    data = load_data()
    msg = "ЁЯУК рж╕ржм ржЗржЙржЬрж╛рж░:\n\n"
    for uid, info in data.items():
        msg += f"ЁЯСд ID: {uid}\nЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: рз│{info.get('balance', 0)}\nЁЯУ╖ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ: {info.get('submitted', 0)}\nЁЯСе рж░рзЗржлрж╛рж░: {info.get('referrals', 0)}\n\n"
    bot.send_message(ADMIN_ID, msg[:4000])  # 4000 char limit

@bot.message_handler(func=lambda m: m.text == "ЁЯЫая╕П ржЗржЙржЬрж╛рж░ ржПржбрж┐ржЯ" and str(m.chat.id) == str(ADMIN_ID))
def edit_user_prompt(message):
    bot.send_message(ADMIN_ID, "тЬПя╕П ржЗржЙржЬрж╛рж░рзЗрж░ ID ржжрж┐ржи ржпрж╛ржХрзЗ ржПржбрж┐ржЯ ржХрж░рждрзЗ ржЪрж╛ржи:")

@bot.message_handler(func=lambda m: str(m.chat.id) == str(ADMIN_ID) and m.reply_to_message and "тЬПя╕П ржЗржЙржЬрж╛рж░рзЗрж░ ID ржжрж┐ржи" in m.reply_to_message.text)
def edit_user_data(message):
    target_id = message.text.strip()
    data = load_data()
    if target_id not in data:
        bot.send_message(ADMIN_ID, "тЭМ ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
        return

    info = data[target_id]
    msg = (
        f"ЁЯЫая╕П ржЗржЙржЬрж╛рж░ ID: {target_id}\n"
        f"ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {info.get('balance', 0)}\n"
        f"ЁЯСе рж░рзЗржлрж╛рж░: {info.get('referrals', 0)}\n"
        f"ЁЯУ╖ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ: {info.get('submitted', 0)}\n\n"
        "ржирждрзБржи ржбрзЗржЯрж╛ ржжрж┐ржи (format: balance,referrals,submitted)"
    )
    bot.send_message(ADMIN_ID, msg)

@bot.message_handler(func=lambda m: str(m.chat.id) == str(ADMIN_ID) and ',' in m.text)
def update_user_info(message):
    try:
        lines = message.text.strip().split(',')
        if len(lines) != 3:
            return bot.send_message(ADMIN_ID, "тЪая╕П рж╕ржарж┐ржХ ржлрж░ржорзНржпрж╛ржЯ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи: balance,referrals,submitted")

        last_msg = bot.get_chat(message.chat.id).last_message
        target_id = message.reply_to_message.text.split("ID: ")[1].split("\n")[0]

        data = load_data()
        if target_id not in data:
            return bot.send_message(ADMIN_ID, "тЭМ ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")

        data[target_id]['balance'] = int(lines[0])
        data[target_id]['referrals'] = int(lines[1])
        data[target_id]['submitted'] = int(lines[2])
        save_data(data)

        bot.send_message(ADMIN_ID, f"тЬЕ ржЗржЙржЬрж╛рж░ {target_id} ржЖржкржбрзЗржЯ рж╣рзЯрзЗржЫрзЗред")
    except Exception as e:
        bot.send_message(ADMIN_ID, f"тЭМ Error: {str(e)}")

# ----------------------

bot.infinity_polling()
