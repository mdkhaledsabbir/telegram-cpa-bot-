import os
import json
import telebot
from telebot import types

# ЁЯФР Bot Token & Admin ID
BOT_TOKEN = "7930016886:AAG3NcW1V-KZZG2xStvPJ6Rg3l21xETHvXs"
ADMIN_ID = 8046323012

bot = telebot.TeleBot(BOT_TOKEN)

# тЬЕ Auto-create data.json file if not exists
if not os.path.exists("data.json"):
    with open("data.json", "w") as f:
        json.dump({}, f)

# ЁЯУВ Load user data
with open("data.json", "r") as f:
    users = json.load(f)

# ЁЯТ╛ Save user data
def save_data():
    with open("data.json", "w") as f:
        json.dump(users, f, indent=4)

# ЁЯУж Start command
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        users[user_id] = {
            "balance": 0,
            "referrals": 0,
            "submitted": False
        }
        # ЁЯФБ Referral check
        if len(message.text.split()) > 1:
            referrer = message.text.split()[1]
            if referrer in users and referrer != user_id:
                users[referrer]["referrals"] += 1
                users[referrer]["balance"] += 10
                bot.send_message(int(referrer), f"тЬЕ ржЖржкржирж┐ ржПржХржЬржи ржХрзЗ рж░рзЗржлрж╛рж░ ржХрж░рзЗржЫрзЗржи ржПржмржВ рззрзж ржЯрж╛ржХрж╛ ржкрзЗрзЯрзЗржЫрзЗржи!")
    save_data()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("ЁЯОп ржЯрж╛рж╕рзНржХ", "ЁЯТ╕ ржмрзНржпрж╛рж▓рзЗржирзНрж╕", "ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ ржжрж┐ржи")
    markup.add("ЁЯСе рж░рзЗржлрж╛рж░", "ЁЯУе ржЙржЗржержбрзНрж░", "ЁЯзСтАНЁЯТ╗ ржПржбржорж┐ржи")

    bot.send_message(message.chat.id, "тЬи рж╕рзНржмрж╛ржЧрждржо! ржПржХржЯрж┐ ржЕржкрж╢ржи ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:", reply_markup=markup)

# ЁЯОп Task button
@bot.message_handler(func=lambda m: m.text == "ЁЯОп ржЯрж╛рж╕рзНржХ")
def show_tasks(message):
    bot.send_message(message.chat.id, "ЁЯз╛ ржирж┐ржЪрзЗ ржЖржкржирж╛рж░ ржЯрж╛рж╕рзНржХ рж▓рж┐ржЩрзНржХ:\n\n1я╕ПтГг https://example.com\n2я╕ПтГг https://example2.com\n3я╕ПтГг https://example3.com\n4я╕ПтГг https://example4.com\n\nЁЯУЭ ржкрзНрж░рждрж┐ржЯрж┐ ржЯрж╛рж╕рзНржХрзЗ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржиред ржкрзНрж░рждрж┐ржЯрж┐ ржЯрж╛рж╕рзНржХрзЗрж░ ржЬржирзНржп рзйрзж ржЯрж╛ржХрж╛ ржкрж╛ржмрзЗржиред")

# ЁЯТ╕ Balance button
@bot.message_handler(func=lambda m: m.text == "ЁЯТ╕ ржмрзНржпрж╛рж▓рзЗржирзНрж╕")
def show_balance(message):
    user_id = str(message.from_user.id)
    user = users.get(user_id, {})
    balance = user.get("balance", 0)
    refs = user.get("referrals", 0)
    bot.send_message(message.chat.id, f"ЁЯТ░ ржЖржкржирж╛рж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {balance} ржЯрж╛ржХрж╛\nЁЯСе рж░рзЗржлрж╛рж░ рж╕ржВржЦрзНржпрж╛: {refs}")

# ЁЯСе рж░рзЗржлрж╛рж░
@bot.message_handler(func=lambda m: m.text == "ЁЯСе рж░рзЗржлрж╛рж░")
def refer_info(message):
    user_id = str(message.from_user.id)
    link = f"https://t.me/myoffer363bot?start={user_id}"
    refs = users[user_id]["referrals"]
    bot.send_message(message.chat.id, f"ЁЯФЧ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ рж▓рж┐ржЩрзНржХ:\n{link}\n\nЁЯСе ржорзЛржЯ рж░рзЗржлрж╛рж░: {refs}\nЁЯТ╡ ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░ = рззрзж ржЯрж╛ржХрж╛")

# ЁЯУд Screenshot submit
@bot.message_handler(func=lambda m: m.text == "ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ ржжрж┐ржи")
def submit_screenshot(message):
    bot.send_message(message.chat.id, "ЁЯУ╕ ржжрзЯрж╛ ржХрж░рзЗ ржЖржкржирж╛рж░ ржЯрж╛рж╕рзНржХ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржкрж╛ржарж╛ржи (рзйржЯрж┐)ред")
    users[str(message.from_user.id)]["submitted"] = True
    save_data()

# ЁЯУе Withdraw
@bot.message_handler(func=lambda m: m.text == "ЁЯУе ржЙржЗржержбрзНрж░")
def withdraw_request(message):
    user_id = str(message.from_user.id)
    balance = users[user_id]["balance"]
    if balance >= 1000:
        bot.send_message(message.chat.id, "ЁЯТ│ ржЖржкржирж┐ ржХрзЛржи ржорж╛ржзрзНржпржорзЗ ржЯрж╛ржХрж╛ рждрзБрж▓рждрзЗ ржЪрж╛ржи?\nbKash / Nagad / Rocket рж╕рж╣ ржирж╛ржорзНржмрж╛рж░ ржкрж╛ржарж╛ржи:")
    else:
        bot.send_message(message.chat.id, "тЭМ ржорж┐ржирж┐ржорж╛ржо рззрзжрзжрзж ржЯрж╛ржХрж╛ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржерж╛ржХрждрзЗ рж╣ржмрзЗ ржЙржЗржержбрзНрж░ ржХрж░рж╛рж░ ржЬржирзНржпред")

# ЁЯзСтАНЁЯТ╗ Admin Panel
@bot.message_handler(func=lambda m: m.text == "ЁЯзСтАНЁЯТ╗ ржПржбржорж┐ржи")
def admin_panel(message):
    if message.from_user.id != ADMIN_ID:
        return
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("ЁЯСБя╕П ржЗржЙржЬрж╛рж░ ржжрзЗржЦрзБржи", callback_data="view_user"))
    markup.add(types.InlineKeyboardButton("тЬПя╕П ржЗржЙржЬрж╛рж░ ржПржбрж┐ржЯ", callback_data="edit_user"))
    bot.send_message(message.chat.id, "ЁЯЫая╕П ржПржбржорж┐ржи ржЕржкрж╢ржи:", reply_markup=markup)

# ЁЯФБ Callback handling
@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    if call.data == "view_user":
        bot.send_message(call.message.chat.id, "ЁЯЖФ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐ ржжрж┐ржи:")
        bot.register_next_step_handler(call.message, process_view_user)

    elif call.data == "edit_user":
        bot.send_message(call.message.chat.id, "тЬПя╕П ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐ ржжрж┐ржи:")
        bot.register_next_step_handler(call.message, process_edit_user)

# ЁЯСБя╕П View User Info
def process_view_user(message):
    user_id = message.text.strip()
    if user_id in users:
        info = users[user_id]
        bot.send_message(message.chat.id, f"ЁЯзС ржЗржЙржЬрж╛рж░ {user_id}:\nЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: {info['balance']} ржЯрж╛ржХрж╛\nЁЯСе рж░рзЗржлрж╛рж░: {info['referrals']}")
    else:
        bot.send_message(message.chat.id, "тЭМ ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")

# тЬПя╕П Edit User
def process_edit_user(message):
    user_id = message.text.strip()
    if user_id in users:
        bot.send_message(message.chat.id, "ЁЯУе ржирждрзБржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржжрж┐ржи:")
        bot.register_next_step_handler(message, lambda m: update_balance(m, user_id))
    else:
        bot.send_message(message.chat.id, "тЭМ ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")

def update_balance(message, user_id):
    try:
        new_balance = int(message.text.strip())
        users[user_id]["balance"] = new_balance
        save_data()
        bot.send_message(message.chat.id, f"тЬЕ ржЗржЙржЬрж╛рж░ {user_id} ржПрж░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЖржкржбрзЗржЯ рж╣рзЯрзЗржЫрзЗ: {new_balance} ржЯрж╛ржХрж╛")
    except:
        bot.send_message(message.chat.id, "тЭМ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЖржкржбрзЗржЯ ржмрзНржпрж░рзНржеред ржПржХржЯрж┐ рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ ржжрж┐ржиред")

# ЁЯУ╕ Approve/Reject system
@bot.message_handler(content_types=['photo'])
def handle_photos(message):
    user_id = str(message.from_user.id)
    if users.get(user_id, {}).get("submitted"):
        caption = f"ЁЯЖФ ржЗржЙржЬрж╛рж░: {user_id}\nтЬЕ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛ ржжрж┐рзЯрзЗржЫрзЗ"
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("тЬЕ Approve", callback_data=f"approve_{user_id}"))
        markup.add(types.InlineKeyboardButton("тЭМ Reject", callback_data=f"reject_{user_id}"))
        bot.send_photo(ADMIN_ID, message.photo[-1].file_id, caption=caption, reply_markup=markup)
        users[user_id]["submitted"] = False
        save_data()

@bot.callback_query_handler(func=lambda call: call.data.startswith("approve_") or call.data.startswith("reject_"))
def approve_reject(call):
    user_id = call.data.split("_")[1]
    if call.data.startswith("approve_"):
        users[user_id]["balance"] += 30
        bot.send_message(int(user_id), "тЬЕ ржЖржкржирж╛рж░ ржЯрж╛рж╕рзНржХ ржПржкрзНрж░рзБржн рж╣рзЯрзЗржЫрзЗ! рзйрзж ржЯрж╛ржХрж╛ ржпрзЛржЧ рж╣рзЯрзЗржЫрзЗред")
    else:
        bot.send_message(int(user_id), "тЭМ ржЖржкржирж╛рж░ ржЯрж╛рж╕рзНржХ рж░рж┐ржЬрзЗржХрзНржЯ рж╣рзЯрзЗржЫрзЗред ржжрзЯрж╛ ржХрж░рзЗ рж╕ржарж┐ржХржнрж╛ржмрзЗ ржкрзВрж░рзНржгрж░рж╛рзЯ ржжрж┐ржиред")
    save_data()
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

# тЦ╢я╕П Run bot
bot.infinity_polling()
