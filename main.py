main.py

import os import telebot from telebot import types import json

TOKEN = os.environ.get('TOKEN') ADMIN_ID = int(os.environ.get('ADMIN_ID')) bot = telebot.TeleBot(TOKEN)

TASK_REWARD = 30 REFERRAL_REWARD = 10 MIN_WITHDRAW = 1000 MAX_SCREENSHOTS = 3

TASKS = { "Task 1": "ЁЯУМ Pin Submit: https://tinyurl.com/37xxp2an\nЁЯЦ╝ рж╕ржмржЧрзБрж▓рзЛ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи\nЁЯТ░ ржкрзЗржорзЗржирзНржЯ: рз│30", "Task 2": "ЁЯУМ Pin Submit: https://tinyurl.com/4vc76fw5\nЁЯЦ╝ рж╕ржмржЧрзБрж▓рзЛ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи\nЁЯТ░ ржкрзЗржорзЗржирзНржЯ: рз│30", "Task 3": "ЁЯУз Email Submit: https://tinyurl.com/yyherfxt\nЁЯЦ╝ рж╕ржмржЧрзБрж▓рзЛ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи\nЁЯТ░ ржкрзЗржорзЗржирзНржЯ: рз│30", "Task 4": "ЁЯУз Email Submit: https://tinyurl.com/25nt96v9\nЁЯЦ╝ рж╕ржмржЧрзБрж▓рзЛ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи\nЁЯТ░ ржкрзЗржорзЗржирзНржЯ: рз│30" }

DATA_FILE = 'users.json' if not os.path.exists(DATA_FILE): with open(DATA_FILE, 'w') as f: json.dump({}, f)

editing_user_id = None  # Global variable for admin editing user

Helper Functions

def load_data(): with open(DATA_FILE) as f: return json.load(f)

def save_data(data): with open(DATA_FILE, 'w') as f: json.dump(data, f, indent=2)

def create_user_if_not_exist(user_id, username, ref=None): data = load_data() if str(user_id) not in data: data[str(user_id)] = { 'username': username, 'balance': 0, 'referrals': [], 'submitted_tasks': [], 'pending_screenshots': [], 'withdraw_requested': False } if ref and str(ref) in data and str(ref) != str(user_id): data[str(ref)]['referrals'].append(user_id) data[str(ref)]['balance'] += REFERRAL_REWARD save_data(data)

def get_user_info_text(user_id): data = load_data() user = data.get(str(user_id)) if user: return f"ЁЯЖФ ID: {user_id}\nЁЯСд Username: @{user['username']}\nЁЯТ░ Balance: рз│{user['balance']}\nЁЯСе Referrals: {len(user['referrals'])}\nтЬЕ Submitted Tasks: {len(user['submitted_tasks'])}" else: return "тЭМ ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред"

@bot.message_handler(commands=['start']) def start_handler(message): user_id = message.from_user.id username = message.from_user.username or "NoUsername" ref = None if len(message.text.split()) > 1: ref = message.text.split()[1] create_user_if_not_exist(user_id, username, ref)

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup.row("ЁЯз╛ ржЯрж╛рж╕рзНржХ", "ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛")
markup.row("ЁЯТ╕ ржЙржЗржержбрзНрж░", "ЁЯСе рж░рзЗржлрж╛рж░")
if user_id == ADMIN_ID:
    markup.row("ЁЯЫая╕П ржЗржЙржЬрж╛рж░ ржПржбрж┐ржЯ", "ЁЯзН ржЗржЙржЬрж╛рж░ ржжрзЗржЦрзБржи")
bot.send_message(user_id, "ЁЯСЛ рж╕рзНржмрж╛ржЧрждржо! ржЖржкржирж┐ ржХрж╛ржЬ рж╢рзБрж░рзБ ржХрж░рждрзЗ ржкрж╛рж░рзЗржи ржирж┐ржЪрзЗрж░ ржорзЗржирзБ ржерзЗржХрзЗред", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "ЁЯз╛ ржЯрж╛рж╕рзНржХ") def task_list_handler(message): for title, desc in TASKS.items(): bot.send_message(message.chat.id, f"ЁЯФ╕ {title}\n{desc}", parse_mode="Markdown")

@bot.message_handler(func=lambda m: m.text == "ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛") def ask_for_screenshots(message): bot.send_message(message.chat.id, f"ЁЯЦ╝ {MAX_SCREENSHOTS}ржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржиред") data = load_data() data[str(message.from_user.id)]['pending_screenshots'] = [] save_data(data)

@bot.message_handler(content_types=['photo']) def handle_screenshots(message): user_id = message.from_user.id data = load_data() if str(user_id) not in data: return pending = data[str(user_id)].get('pending_screenshots', []) if len(pending) < MAX_SCREENSHOTS: pending.append(message.photo[-1].file_id) data[str(user_id)]['pending_screenshots'] = pending save_data(data) bot.reply_to(message, f"тЬЕ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ {len(pending)}/{MAX_SCREENSHOTS} ржЬржорж╛ рж╣рзЯрзЗржЫрзЗред")

if len(pending) == MAX_SCREENSHOTS:
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton("тЬЕ ржПржкрзНрж░рзБржн", callback_data=f"approve:{user_id}"))
        markup.add(types.InlineKeyboardButton("тЭМ рж░рж┐ржЬрзЗржХрзНржЯ", callback_data=f"reject:{user_id}"))
        for file_id in pending:
            bot.send_photo(ADMIN_ID, file_id)
        bot.send_message(ADMIN_ID, f"ЁЯСд ржЗржЙржЬрж╛рж░: {user_id} рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ рж╕рж╛ржмржорж┐ржЯ ржХрж░рзЗржЫрзЗред", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith('approve:')) def approve_task(call): user_id = call.data.split(':')[1] data = load_data() if user_id in data: data[user_id]['balance'] += TASK_REWARD data[user_id]['submitted_tasks'].append(len(data[user_id]['submitted_tasks']) + 1) data[user_id]['pending_screenshots'] = [] save_data(data) bot.send_message(int(user_id), "тЬЕ ржЖржкржирж╛рж░ ржХрж╛ржЬржЯрж┐ ржПржкрзНрж░рзБржн ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред") bot.answer_callback_query(call.id, "ржЯрж╛ржХрж╛ ржпрзЛржЧ рж╣ржпрж╝рзЗржЫрзЗред")

@bot.callback_query_handler(func=lambda call: call.data.startswith('reject:')) def reject_task(call): user_id = call.data.split(':')[1] data = load_data() if user_id in data: data[user_id]['pending_screenshots'] = [] save_data(data) bot.send_message(int(user_id), "тЭМ ржЖржкржирж╛рж░ ржЯрж╛рж╕рзНржХ ржнрзБрж▓ ржЫрж┐рж▓ред ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред") bot.answer_callback_query(call.id, "рж░рж┐ржЬрзЗржХрзНржЯ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗред")

@bot.message_handler(func=lambda m: m.text == "ЁЯСе рж░рзЗржлрж╛рж░") def referral_info(message): data = load_data() user = data.get(str(message.from_user.id), {}) ref_link = f"https://t.me/{bot.get_me().username}?start={message.from_user.id}" bot.send_message(message.chat.id, f"ЁЯСе рж░рзЗржлрж╛рж░ рж╕ржВржЦрзНржпрж╛: {len(user.get('referrals', []))}\nЁЯз╛ рж░рзЗржлрж╛рж░ ржкрзНрж░рждрж┐: рз│10\nЁЯУи ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ:\n{ref_link}")

@bot.message_handler(func=lambda m: m.text == "ЁЯТ╕ ржЙржЗржержбрзНрж░") def withdraw_handler(message): user_id = message.from_user.id data = load_data() user = data.get(str(user_id)) if user['balance'] >= MIN_WITHDRAW: user['withdraw_requested'] = True save_data(data) bot.send_message(message.chat.id, "тЬЕ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред\nЁЯУ▓ ржкрзЗржорзЗржирзНржЯ ржорзЗржержб: bKash, Nagad, Rocket") bot.send_message(ADMIN_ID, f"ЁЯУд ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ\nЁЯЖФ: {user_id}\nрз│{user['balance']}") else: bot.send_message(message.chat.id, f"тЭМ ржЙржЗржержбрзНрж░ ржХрж░рждрзЗ рж╣рж▓рзЗ ржХржоржкржХрзНрж╖рзЗ рз│{MIN_WITHDRAW} ржкрзНрж░рзЯрзЛржЬржиред")

@bot.message_handler(func=lambda m: m.text == "ЁЯзН ржЗржЙржЬрж╛рж░ ржжрзЗржЦрзБржи") def ask_for_userid(message): msg = bot.send_message(message.chat.id, "ЁЯФН ржпрзЗ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐ ржжрзЗржЦрждрзЗ ржЪрж╛ржи, ржжрж┐ржи:") bot.register_next_step_handler(msg, show_user_info)

def show_user_info(message): user_id = message.text.strip() bot.send_message(message.chat.id, get_user_info_text(user_id))

@bot.message_handler(func=lambda m: m.text == "ЁЯЫая╕П ржЗржЙржЬрж╛рж░ ржПржбрж┐ржЯ") def edit_user_start(message): msg = bot.send_message(message.chat.id, "тЬПя╕П ржпрзЗржЗ ржЗржЙржЬрж╛рж░ ржЖржЗржбрж┐ ржПржбрж┐ржЯ ржХрж░рждрзЗ ржЪрж╛ржи, ржжрж┐ржи:") bot.register_next_step_handler(msg, ask_balance_edit)

def ask_balance_edit(message): global editing_user_id editing_user_id = message.text.strip() msg = bot.send_message(message.chat.id, "ЁЯТ░ ржирждрзБржи ржмрзНржпрж╛рж▓рзЗржирзНрж╕ рж▓рж┐ржЦрзБржи:") bot.register_next_step_handler(msg, apply_balance_edit)

def apply_balance_edit(message): global editing_user_id try: new_balance = int(message.text.strip()) data = load_data() if editing_user_id in data: data[editing_user_id]['balance'] = new_balance save_data(data) bot.send_message(message.chat.id, "тЬЕ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржЖржкржбрзЗржЯ рж╣ржпрж╝рзЗржЫрзЗред") else: bot.send_message(message.chat.id, "тЭМ ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред") except ValueError: bot.send_message(message.chat.id, "тЭМ рж╕ржарж┐ржХ рж╕ржВржЦрзНржпрж╛ рж▓рж┐ржЦрзБржиред")

bot.polling(none_stop=True)
