import os
import telebot
from telebot import types
import json

# Env variables
TOKEN = os.environ.get('TOKEN')
ADMIN_ID = int(os.environ.get('ADMIN_ID'))
bot = telebot.TeleBot(TOKEN)

# CPA Tasks
TASKS = {
    "Task 1": "ЁЯУМ Pin Submit: https://tinyurl.com/37xxp2an\nЁЯЦ╝ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи",
    "Task 2": "ЁЯУМ Pin Submit: https://tinyurl.com/4vc76fw5\nЁЯЦ╝ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи",
    "Task 3": "ЁЯУз Email Submit: https://tinyurl.com/yyherfxt\nЁЯЦ╝ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи",
    "Task 4": "ЁЯУз Email Submit: https://tinyurl.com/25nt96v9\nЁЯЦ╝ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржжрж┐ржи"
}

# JSON data file
DATA_FILE = 'users.json'

if not os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'w') as f:
        json.dump({}, f)

def load_data():
    with open(DATA_FILE) as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w') as f:
        json.dump(data, f)

# /start command
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.chat.id)
    data = load_data()
    if user_id not in data:
        data[user_id] = {'referrals': 0, 'balance': 0, 'submitted': False}
        ref = message.text.split(' ')[1] if len(message.text.split()) > 1 else None
        if ref and ref in data and ref != user_id:
            data[ref]['referrals'] += 1
            data[ref]['balance'] += 10
            bot.send_message(int(ref), f"ЁЯОЙ ржЖржкржирж┐ рззржЯрж┐ рж░рзЗржлрж╛рж░рзЗрж▓ ржкрзЗрзЯрзЗржЫрзЗржи!\nЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕ ржПржЦржи: рз│{data[ref]['balance']}")

    save_data(data)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("ЁЯУЭ ржЯрж╛рж╕рзНржХржЧрзБрж▓рзЛ", "ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛", "ЁЯТ╕ ржмрзНржпрж╛рж▓рзЗржирзНрж╕", "ЁЯУи ржЙржЗржержбрзНрж░", "ЁЯСе рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ")
    bot.send_message(message.chat.id, "рж╕рзНржмрж╛ржЧрждржо! ржирж┐ржЪрзЗрж░ ржмрж╛ржЯржиржЧрзБрж▓рзЛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ЁЯСЗ", reply_markup=markup)

# Task list
@bot.message_handler(func=lambda m: m.text == "ЁЯУЭ ржЯрж╛рж╕рзНржХржЧрзБрж▓рзЛ")
def task_list(message):
    msg = "ЁЯФ╣ ржмрж░рзНрждржорж╛ржи ржЯрж╛рж╕рзНржХрж╕ржорзВрж╣:\n\n"
    for title, link in TASKS.items():
        msg += f"тЬЕ {title}\n{link}\n\n"
    bot.send_message(message.chat.id, msg)

# Screenshot prompt
@bot.message_handler(func=lambda m: m.text == "ЁЯУд рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЬржорж╛")
def ask_screenshot(message):
    bot.send_message(message.chat.id, "ЁЯФД ржжрзЯрж╛ ржХрж░рзЗ рзйржЯрж┐ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржПржХ ржПржХ ржХрж░рзЗ ржкрж╛ржарж╛ржиред")

# Handle screenshot
@bot.message_handler(content_types=['photo'])
def handle_screenshot(message):
    user_id = str(message.chat.id)
    caption = f"ЁЯЖФ ржЗржЙржЬрж╛рж░ ID: {user_id}\nЁЯСд ржЗржЙржЬрж╛рж░ржирзЗржо: @{message.chat.username or 'N/A'}"
    bot.forward_message(ADMIN_ID, message.chat.id, message.message_id)
    bot.send_message(ADMIN_ID, caption)
    bot.send_message(message.chat.id, "тЬЕ ржЖржкржирж╛рж░ рж╕рзНржХрзНрж░рж┐ржирж╢ржЯ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржЪрзЗржХ ржХрж░рзЗ ржПржкрзНрж░рзБржн ржХрж░рж╛ рж╣ржмрзЗред")

# Balance check
@bot.message_handler(func=lambda m: m.text == "ЁЯТ╕ ржмрзНржпрж╛рж▓рзЗржирзНрж╕")
def check_balance(message):
    user_id = str(message.chat.id)
    data = load_data()
    user = data.get(user_id, {})
    balance = user.get('balance', 0)
    bot.send_message(message.chat.id, f"ЁЯТ░ ржЖржкржирж╛рж░ ржорзЛржЯ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: рз│{balance} ржЯрж╛ржХрж╛")

# Temporary dictionary to hold withdraw steps
withdraw_data = {}

@bot.message_handler(func=lambda m: m.text == "ЁЯУи ржЙржЗржержбрзНрж░")
def withdraw_request(message):
    user_id = str(message.chat.id)
    data = load_data()
    balance = data[user_id]['balance']
    
    if balance < 1000:
        bot.send_message(message.chat.id, "тЭМ ржЙржЗржержбрзНрж░ ржПрж░ ржЬржирзНржп ржХржоржкржХрзНрж╖рзЗ рз│1000 ржЯрж╛ржХрж╛ ржерж╛ржХрждрзЗ рж╣ржмрзЗред")
        return

    withdraw_data[user_id] = {}
    msg = bot.send_message(message.chat.id, "ЁЯСд ржЖржкржирж╛рж░ ржкрзВрж░рзНржг ржирж╛ржо рж▓рж┐ржЦрзБржи:")
    bot.register_next_step_handler(msg, process_name)

def process_name(message):
    user_id = str(message.chat.id)
    withdraw_data[user_id]['name'] = message.text
    msg = bot.send_message(message.chat.id, "ЁЯУЮ ржЖржкржирж╛рж░ ржорзЛржмрж╛ржЗрж▓ ржиржорзНржмрж░ ржжрж┐ржи:")
    bot.register_next_step_handler(msg, process_number)

def process_number(message):
    user_id = str(message.chat.id)
    withdraw_data[user_id]['number'] = message.text
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add("ржмрж┐ржХрж╛рж╢", "ржиржЧржж", "рж░ржХрзЗржЯ")
    msg = bot.send_message(message.chat.id, "ЁЯТ│ ржЖржкржирж┐ ржХрзЛржи ржорзЗржержбрзЗ ржЯрж╛ржХрж╛ ржирж┐рждрзЗ ржЪрж╛ржи?", reply_markup=markup)
    bot.register_next_step_handler(msg, process_method)

def process_method(message):
    user_id = str(message.chat.id)
    data = load_data()
    balance = data[user_id]['balance']

    withdraw_data[user_id]['method'] = message.text
    name = withdraw_data[user_id]['name']
    number = withdraw_data[user_id]['number']
    method = withdraw_data[user_id]['method']

    # Final confirmation to user
    bot.send_message(message.chat.id, "тЬЕ ржЖржкржирж╛рж░ ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ ржЧрзНрж░рж╣ржг ржХрж░рж╛ рж╣рзЯрзЗржЫрзЗред ржПржкрзНрж░рзБржн рж╣рж▓рзЗ ржЬрж╛ржирж╛ржирзЛ рж╣ржмрзЗред\nЁЯУЕ ржкрзЗржорзЗржирзНржЯ ржкрзНрж░рждрж┐ржорж╛рж╕рзЗрж░ рзйрзз рждрж╛рж░рж┐ржЦ ржжрзЗржУрзЯрж╛ рж╣ржмрзЗред")

    # Notify admin
    info = f"""ЁЯУе ржирждрзБржи ржЙржЗржержбрзНрж░ рж░рж┐ржХрзЛрзЯрзЗрж╕рзНржЯ:
ЁЯСд ржирж╛ржо: {name}
ЁЯУЮ ржиржорзНржмрж░: {number}
ЁЯТ│ ржорзЗржержб: {method}
ЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: рз│{balance}
ЁЯЖФ ржЗржЙржЬрж╛рж░: @{message.chat.username or 'N/A'} ({user_id})"""
    
    bot.send_message(ADMIN_ID, info)

# Referral link
@bot.message_handler(func=lambda m: m.text == "ЁЯСе рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ")
def referral(message):
    bot.send_message(message.chat.id, f"ЁЯФЧ ржЖржкржирж╛рж░ рж░рзЗржлрж╛рж░ рж▓рж┐ржВржХ:\nhttps://t.me/{bot.get_me().username}?start={message.chat.id}\n\nЁЯСе ржкрзНрж░рждрж┐ рж░рзЗржлрж╛рж░рзЗ рззрзж ржЯрж╛ржХрж╛!")

# Admin: Check user balance
@bot.message_handler(commands=['balance'])
def check_user_balance(message):
    if message.chat.id != ADMIN_ID:
        return

    try:
        parts = message.text.split()
        target_id = parts[1]
        data = load_data()

        if target_id in data:
            bal = data[target_id]['balance']
            ref = data[target_id]['referrals']
            bot.send_message(message.chat.id, f"ЁЯУК ржЗржЙржЬрж╛рж░ {target_id}:\nЁЯТ░ ржмрзНржпрж╛рж▓рзЗржирзНрж╕: рз│{bal}\nЁЯСе рж░рзЗржлрж╛рж░: {ref}")
        else:
            bot.send_message(message.chat.id, "тЭМ ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУрзЯрж╛ ржпрж╛рзЯржирж┐ред")
    except:
        bot.send_message(message.chat.id, "тЪая╕П ржХржорж╛ржирзНржб ржнрзБрж▓!\nрж╕ржарж┐ржХ ржмрзНржпржмрж╣рж╛рж░: /balance <user_id>")

bot.infinity_polling()
